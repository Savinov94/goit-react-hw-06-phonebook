{"version":3,"file":"static/js/227.06d62ab0.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"input\":\"Form_input__FTtTw\",\"formButton\":\"Form_formButton__7mGGM\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\n\nconst Form = ({ onSubmit }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = formData;\n    const id = nanoid();\n    onSubmit({ id, name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <div className={css.formContainer}>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label>\n          <input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <label>\n          <input\n            className={css.input}\n            type=\"tel\"\n            placeholder=\"Number\"\n            name=\"number\"\n            value={formData.number.replace(/[^0-9.]/g, '')}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <button className={css.formButton}>Add Contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_ref","onSubmit","_useState","useState","name","number","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_e$currentTarget","currentTarget","prevData","_objectSpread","reset","_jsx","className","css","children","_jsxs","preventDefault","id","size","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","type","placeholder","onChange","required","replace"],"sourceRoot":""}